{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["GlobalStyle","createGlobalStyle","Wrapper","styled","div","PlaygroundWrapper","Header","h1","Text","p","LinksWrapper","Link","a","IconWrapper","LinkContentWrapper","LinkTitle","LinkDesc","App","href","target","width","height","code","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQA2DMA,EAAcC,4BAAH,kLAYXC,EAAUC,UAAOC,IAAV,gKASPC,EAAoBF,UAAOC,IAAV,mEAKjBE,EAASH,UAAOI,GAAV,gEAKNC,EAAOL,UAAOM,EAAV,qEAKJC,EAAeP,UAAOC,IAAV,0EAKZO,EAAOR,UAAOS,EAAV,sTAmBJC,EAAcV,UAAOC,IAAV,qIAQXU,EAAqBX,UAAOC,IAAV,2CAIlBW,EAAYZ,UAAOC,IAAV,kDAITY,EAAWb,UAAOC,IAAV,wFAyCCa,MAnCf,WACE,OACE,qCACE,cAACjB,EAAD,IACA,eAACE,EAAD,WACE,cAACI,EAAD,kBACA,eAACE,EAAD,qEAA6D,gDAA7D,oBAAyG,mDACzG,eAACE,EAAD,WACE,eAACC,EAAD,CAAMO,KAAK,+BAA+BC,OAAO,SAAjD,UACE,cAACN,EAAD,UACE,cAAC,IAAD,MAEF,eAACC,EAAD,WACE,cAACC,EAAD,qBACA,cAACC,EAAD,+CAGJ,eAACL,EAAD,CAAMO,KAAK,oCAAoCC,OAAO,SAAtD,UACE,cAACN,EAAD,UACE,cAAC,IAAD,MAEF,eAACC,EAAD,WACE,cAACC,EAAD,kBACA,cAACC,EAAD,uCAIN,cAACX,EAAD,UACE,cAAC,IAAD,CAAYe,MAAM,SAASC,OAAO,QAAQC,KAnK1C,+/DCMKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.06a27508.chunk.js","sourcesContent":["import Playground from 'm3k-playground'\nimport styled, { createGlobalStyle } from 'styled-components'\nimport { DiNpm, DiGithubBadge } from 'react-icons/di'\n\nimport 'typeface-inter'\n\nconst code = `((getval set-attribute (getval body document)) \"style\" \"margin: 0px; background-color: #ffffff;\")\n\n(define canvas ((getval create-element document) \"canvas\"))\n(define ctx ((getval get-context canvas) \"2d\"))\n(set! (getval width canvas) 400)\n(set! (getval height canvas) 400)\n((getval set-attribute canvas) \"style\" \"position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%)\")\n\n((getval append-child (getval body document)) canvas)\n\n(define until (defun (cur limit fn)\n  (if (< cur limit)\n      (progn\n        (fn cur limit)\n        (until (+ cur 1) limit fn)))))\n\n(define ball-arr (list))\n\n(until 0 (+ (* 15 ((getval random Math))) 5) (defun ()\n  (push ball-arr (dict\n    :x (+ (* (- (getval width canvas) 100) ((getval random Math))) 80)\n    :y (+ (* (- (getval height canvas) 100) ((getval random Math))) 80)\n    :r 8\n    :vx (+ (* (- 14) ((getval random Math))) 7)\n    :vy (+ (* 7 ((getval random Math))) 2)\n  ))))\n\n(define update-ball (defun (ball)\n  (progn\n    (set! (getval x ball) (+ (getval x ball) (getval vx ball)))\n    (set! (getval y ball) (+ (getval y ball) (getval vy ball)))\n    (if (< (getval x ball) 0) (set! (getval vx ball) (* (getval vx ball) (- 1))))\n    (if (> (getval x ball) (getval width canvas)) (set! (getval vx ball) (* (getval vx ball) (- 1))))\n    (if (< (getval y ball) 0) (set! (getval vy ball) (* (getval vy ball) (- 1))))\n    (if (> (getval y ball) (getval height canvas)) (set! (getval vy ball) (* (getval vy ball) (- 1))))\n  )))\n\n(define loop (defun ()\n(progn\n  (set! (getval fill-style ctx) \"#f4f4f4\")\n  ((getval fill-rect ctx) 0 0 (getval width canvas) (getval height canvas))\n  (until 0 (length ball-arr) (defun (cur)\n    (progn\n      (define b (nth cur ball-arr))\n      (update-ball b)\n      ((getval begin-path ctx))\n      (set! (getval fill-style ctx) \"black\")\n      ((getval arc ctx) (getval x b) (getval y b) (getval r b) 0 (* 2 (getval PI Math)))\n      ((getval fill ctx))\n    )))\n  (request-animation-frame loop))))\n(loop)`\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background-color: #ffffff;\n    font-family: 'Inter', sans-serif;\n    color: #0a0a0a;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n`\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 16px;\n  padding-top: 5vh;\n  padding-bottom: 5vh;\n`\n\nconst PlaygroundWrapper = styled.div`\n  width: 1300px;\n  margin-top: 48px;\n`\n\nconst Header = styled.h1`\n  font-size: 48px;\n  margin: 0px;\n`\n\nconst Text = styled.p`\n  font-size: 18px;\n  font-weight: 500;\n`\n\nconst LinksWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nconst Link = styled.a`\n  width: 260px;\n  display: flex;\n  border: 1px solid #d2d2d2;\n  color: #0a0a0a;\n  text-decoration: none;\n  border-radius: 5px;\n  padding: 5px;\n  align-items: center;\n\n  &:not(:last-child) {\n    margin-right: 10px;\n  }\n\n  &:hover {\n    background-color: #f4f4f4;\n  }\n`\n\nconst IconWrapper = styled.div`\n  width: 30%;\n  font-size: 48px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst LinkContentWrapper = styled.div`\n  width: 70%;\n`\n\nconst LinkTitle = styled.div`\n  font-weight: bold;\n`\n\nconst LinkDesc = styled.div`\n  font-weight: 500;\n  font-size: 14px;\n  color: #707070;\n`\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <Header>m3k</Header>\n        <Text>m3k is a experimantel lisp dialect that was written in <strong>TypeScript</strong> and compiles to <strong>JavaScript</strong></Text>\n        <LinksWrapper>\n          <Link href=\"https://github.com/obsfx/m3k\" target=\"_blank\">\n            <IconWrapper>\n              <DiGithubBadge />\n            </IconWrapper>\n            <LinkContentWrapper>\n              <LinkTitle>Github</LinkTitle>\n              <LinkDesc>Source & Language Overview</LinkDesc>\n            </LinkContentWrapper>\n          </Link>\n          <Link href=\"https://www.npmjs.com/package/m3k\" target=\"_blank\">\n            <IconWrapper>\n              <DiNpm />\n            </IconWrapper>\n            <LinkContentWrapper>\n              <LinkTitle>NPM</LinkTitle>\n              <LinkDesc>Install via NPM</LinkDesc>\n            </LinkContentWrapper>\n          </Link>\n        </LinksWrapper>\n        <PlaygroundWrapper>\n          <Playground width=\"1300px\" height=\"720px\" code={code} />\n        </PlaygroundWrapper>\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}